1. 

1.1 Solution

const singleNumber = (nums) => {
    for (const i of nums) {
        if (nums.filter(x => x === i).length == 1) {
            return i;
        }
    }
};



1.2 Explanation:
- The idea from the above code is simple. Since we know that the single occurences item has a lenght of 1.
- Using "filter" method from ES6, we filter out item that has lenght of 1, which is a single occurence item, our desired result.


1.3 Performance:
- Space complexity: O(n)
- Time complexity: O(n)


1.4 Improvement:
- There are many ways to do this problem. Depending on which language we use, we will have a pros and cons. For example, I will use Java.


1.4.1
class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        int i=0;
        while(i < nums.length-1){
            if(nums[i] != nums[i+1]) return nums[i];
            i += 3;
        }
        return nums[nums.length-1];
    }
}

- Explanation: first we sort the array. We then run a while a loop in our array. If the two numbers are different, we will get our answer. If they are the same, we skip the next 3 number and find a next single occurence number.
- This solution will have a O(n) in both time and space complexity. The only cons is we have to use built-in Java function "sort".

1.4.2 
public class Solution {
    public int singleNumber(int[] nums) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i=0;i<nums.length;i++){
            int n = nums[i];
            if (map.containsKey(n)){
                int val = map.get(n);
                if (val == 1){
                    map.put(n, 2);
                }
                else{
                    map.remove(n);
                }
            }
            else{
                map.put(n, 1);
            }
        }
        return map.keySet().iterator().next();
    }
}

- Explanation: this solution use Map to utilize the way we store our value and index. The only cons we have is that we will require an extra memory space (Map), the time complexity O(n).

-----------------------------------------------------------
2.


2.1 

var sumEvenGrandparent = function(root) {
    let sum = 0;
    
    const dfs = (root, parent = null, grandparent = null) => {
        if (!root) return;
        
        if (grandparent && grandparent.val % 2 === 0) {
            sum += root.val;
        }
        
        dfs(root.left, root, parent);
        dfs(root.right, root, parent);
    }
    
    dfs(root);
    
    return sum;
};

2.1 Explanation:
- The problem is very simple and easy to understand. They only ask us to find the sum of nodes that its parent and grand parents are even.
- First we traverse the tree but keeping the parent and grandparent. It does not matter which traversal method we use In-Order, Post-Order, Pre-Order should give us our desired result.
- We then check if the current node is even-valued. If it is, we add it to our answer. If it is not, we continue traversing the tree.

2.2 Performance:
- Space complexity: O(n)
- Time complexity: O(n)





